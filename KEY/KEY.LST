Microsoft (R) Macro Assembler Version 6.11		    02/14/20 14:21:53
key.asm							     Page 1 - 1


				;------------------------------------------------------------------
				;   program:    KEY
				;   function:   Reads printable characters from standard input
				;               (keyboard or a redirected ASCII text file). If the
				;               character is an upper case letter (A-Z) then write
				;               it to the standard output. If the character is a
				;               lower case letter (a-z) then convert it to upper
				;               case and write it to the standard output. If the
				;               character is a blank or period then write it to the
				;               standard output. If the character is anything else
				;               then do not write it to standard output, just throw
				;               the character away. After processing the character,
				;               if the character is a period then end the programâ€™s
				;               execution.
				;   run:        Start the program, then give input from standard
				;               (keyboard or a redirected ASCII text file).
				;   messages:   N/A
				;   return:     N/A
				;   limits:     Only handles the printable ASCII characters in the
				;               range of 20h-7Fh.
				;   owner:      Selena Chen
				;   date:       2/14/2000
				;   changes:    N/A
				;--------------------------------
				        .model  small           ;64k code and 64k data
				        .8086                   ;only allow 8086 instructions
				        .stack  256             ;reserver 256 bytes for the stack
				;--------------------------------
 0000				        .data                   ;start the data segment
				;--------------------------------
 0000  0020 [			tran    db      32  dup ('*')                   ;chars below blank
        2A
       ]
 0020  20			        db      20h                             ;blank character
 0021  000D [			        db      13  dup ('*')                   ;chars below period
        2A
       ]
 002E  2E			        db      2Eh                             ;period character
 002F  0012 [			        db      18  dup ('*')                   ;chars below 'A'
        2A
       ]
 0041  41 42 43 44 45 46	        db      'ABCDEFGHIJKLMNOPQRSTUVWXYZ'    ;A-Z
       47 48 49 4A 4B 4C
       4D 4E 4F 50 51 52
       53 54 55 56 57 58
       59 5A
 005B  0006 [			        db      6   dup ('*')                   ;chars above 'Z'
        2A
       ]
 0061  41 42 43 44 45 46	        db      'ABCDEFGHIJKLMNOPQRSTUVWXYZ'    ;a-z in uppercase
       47 48 49 4A 4B 4C
       4D 4E 4F 50 51 52
       53 54 55 56 57 58
       59 5A
 007B  0085 [			        db      133 dup ('*')                   ;chars above 'z'
        2A
       ]
 0100 2E			period  db      2Eh                             ;period character
 0101 2A			invalid db      '*'                             ;invalid character
				;--------------------------------
 0000				        .code                   ;start the code segment
				;--------------------------------
 0000				start:                          ;
 0000  B8 ---- R		        mov     ax,@data        ;establish addressability to the
 0003  8E D8			        mov     ds,ax           ;data segment for this program
				;--------------------------------
				; reads a character
				;--------------------------------
 0005				read:                           ;
 0005  BB 0000 R		        mov     bx,offset tran  ;bx points to the table
 0008  B4 08			        mov     ah,8            ;set the dos code to read a char
 000A  CD 21			        int     21h             ;read the char
				;--------------------------------
				; process a character
				;--------------------------------
 000C  D7			        xlat                    ;translate the char
 000D  8A D0			        mov     dl,al           ;move char to dl
 000F  3A 16 0101 R		        cmp     dl,[invalid]    ;was the char invalid
 0013  74 F0			        je      read            ;yes read another char
				;--------------------------------
				; writes a character
				;--------------------------------
 0015  B4 02			        mov     ah,2            ;no, code to write char
 0017  CD 21			        int     21h             ;write the char
				;--------------------------------
				; continuation check
				;--------------------------------
 0019  3A 16 0100 R		        cmp     dl,[period]     ;was the char a period
 001D  75 E6			        jne     read            ;no, read another char
				;--------------------------------
				; terminate program execution
				;--------------------------------
 001F				exit:                           ;
 001F  B8 4C00			        mov     ax,4c00h        ;set dos code to terminate program
 0022  CD 21			        int     21h             ;return to dos
				        end     start           ;marks the end of the source code
				                                ;and specifies where you want the
				                                ;program to start execution
				;--------------------------------
Microsoft (R) Macro Assembler Version 6.11		    02/14/20 14:21:53
key.asm							     Symbols 2 - 1




Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

DGROUP . . . . . . . . . . . . .	GROUP
_DATA  . . . . . . . . . . . . .	16 Bit	 0102	  Word	  Public  'DATA'	
STACK  . . . . . . . . . . . . .	16 Bit	 0100	  Para	  Stack	  'STACK'	 
_TEXT  . . . . . . . . . . . . .	16 Bit	 0024	  Word	  Public  'CODE'	


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 0000h	 
@DataSize  . . . . . . . . . . .	Number	 0000h	 
@Interface . . . . . . . . . . .	Number	 0000h	 
@Model . . . . . . . . . . . . .	Number	 0002h	 
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 DGROUP
@fardata?  . . . . . . . . . . .	Text   	 FAR_BSS
@fardata . . . . . . . . . . . .	Text   	 FAR_DATA
@stack . . . . . . . . . . . . .	Text   	 DGROUP
exit . . . . . . . . . . . . . .	L Near	 001F	  _TEXT	
invalid  . . . . . . . . . . . .	Byte	 0101	  _DATA	
period . . . . . . . . . . . . .	Byte	 0100	  _DATA	
read . . . . . . . . . . . . . .	L Near	 0005	  _TEXT	
start  . . . . . . . . . . . . .	L Near	 0000	  _TEXT	
tran . . . . . . . . . . . . . .	Byte	 0000	  _DATA	

	   0 Warnings
	   0 Errors
