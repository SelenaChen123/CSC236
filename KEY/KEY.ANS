Test date: 02/14/20  14:23:02 
The number of times you used the grading program is 1 
In the business world, your customer replaces the grading program. 
The goal is a correct program with the fewest grading attempts. 
Key Grading System Version 4.1
Student: Last=Chen                 First=Selena               Type=Individual          
Grading and testing history log
       User Test.    Date: 02/14/20  13:48:33  keyboard     test         
       User Test.    Date: 02/14/20  13:50:44  keyboard     test         
       User Test.    Date: 02/14/20  13:51:26  keyboard     test         
       User Test.    Date: 02/14/20  13:53:53  keyboard     test         
       User Test.    Date: 02/14/20  14:01:57  keyboard     test         
       User Test.    Date: 02/14/20  14:17:09  keyboard     test         
       User Test.    Date: 02/14/20  14:17:41  keyboard     test         
       User Test.    Date: 02/14/20  14:18:28  nt           test         
       User Test.    Date: 02/14/20  14:22:07  nt           test         
       User Test.    Date: 02/14/20  14:22:09  keyboard     test         
   *** Grading Run.  Date: 02/14/20  14:23:02 
Running test
Test ran correctly.
++ Grade ++   60 = Points earned for correct answers.

-> A major reason for programming in assembler is to maximize efficiency.
This can be instructions written and/or instructions executed.
Please read the section in the class notes titled Code Complexity.

We are now analyzing your source code. You will be graded on
the number of instructions you wrote to solve this problem.
The target for the number of executable instructions written is:
20 points for   0 -  20  
15 points for  21 -  22  
10 points for  23 -  24 
05 points for  25 -  26 
00 points for  27+      
Your actual counts are:
Lines .......  81    Comments ...  46    Labels .......   3   
Directives ..   6    Variables ..  11    Executables ..  15    McCabe ..   3 
++ Grade ++   20 = Points earned for code written efficiency.  

The McCabe number for your KEY.ASM is 3 which is considered 
fine for the KEY assignment and indicates reasonable program structure.

-> Analyzing program documentation. 
The heuristic algorithms used may have problems with your specific code. 
Contact the instructor if you detect a problem with your grade. 
DOCPH-0024 The program header format is adequate. 
DOCHB-0.93 Use of code block headers is adequate. 
DOCLC-1.00 Use of line comments is adequate. 
++ Grade ++   20 = Points earned for correct documentation.    

-> Calculating the total grade for the program.                  
This grade is subject to adjustment by the instructor.           
This grade will be reduced by any late submission penalty.       
++ Grade ++  100 = Total grade generated by the Grading System.  

-> Statistics on testing and grading                             
    10  = Number of user tests.                                  
     1  = Number of grading runs to get the program working.     
     0  = Number of grading runs to improve efficiency or documentation. 

+- atyC<6&}xC86&k~C6&juiC86&zuzC766&Zkyz&jgzk@&6857:586&&7:@89@68&

Building the file key.ans for electronic submission...
;------------------------------------------------------------------
;   program:    KEY
;   function:   Reads printable characters from standard input
;               (keyboard or a redirected ASCII text file). If the
;               character is an upper case letter (A-Z) then write
;               it to the standard output. If the character is a
;               lower case letter (a-z) then convert it to upper
;               case and write it to the standard output. If the
;               character is a blank or period then write it to the
;               standard output. If the character is anything else
;               then do not write it to standard output, just throw
;               the character away. After processing the character,
;               if the character is a period then end the programâ€™s
;               execution.
;   run:        Start the program, then give input from standard
;               (keyboard or a redirected ASCII text file).
;   messages:   N/A
;   return:     N/A
;   limits:     Only handles the printable ASCII characters in the
;               range of 20h-7Fh.
;   owner:      Selena Chen
;   date:       2/14/2000
;   changes:    N/A
;--------------------------------
        .model  small           ;64k code and 64k data
        .8086                   ;only allow 8086 instructions
        .stack  256             ;reserver 256 bytes for the stack
;--------------------------------
        .data                   ;start the data segment
;--------------------------------
tran    db      32  dup ('*')                   ;chars below blank
        db      20h                             ;blank character
        db      13  dup ('*')                   ;chars below period
        db      2Eh                             ;period character
        db      18  dup ('*')                   ;chars below 'A'
        db      'ABCDEFGHIJKLMNOPQRSTUVWXYZ'    ;A-Z
        db      6   dup ('*')                   ;chars above 'Z'
        db      'ABCDEFGHIJKLMNOPQRSTUVWXYZ'    ;a-z in uppercase
        db      133 dup ('*')                   ;chars above 'z'
period  db      2Eh                             ;period character
invalid db      '*'                             ;invalid character
;--------------------------------
        .code                   ;start the code segment
;--------------------------------
start:                          ;
        mov     ax,@data        ;establish addressability to the
        mov     ds,ax           ;data segment for this program
;--------------------------------
; reads a character
;--------------------------------
read:                           ;
        mov     bx,offset tran  ;bx points to the table
        mov     ah,8            ;set the dos code to read a char
        int     21h             ;read the char
;--------------------------------
; process a character
;--------------------------------
        xlat                    ;translate the char
        mov     dl,al           ;move char to dl
        cmp     dl,[invalid]    ;was the char invalid
        je      read            ;yes read another char
;--------------------------------
; writes a character
;--------------------------------
        mov     ah,2            ;no, code to write char
        int     21h             ;write the char
;--------------------------------
; continuation check
;--------------------------------
        cmp     dl,[period]     ;was the char a period
        jne     read            ;no, read another char
;--------------------------------
; terminate program execution
;--------------------------------
exit:                           ;
        mov     ax,4c00h        ;set dos code to terminate program
        int     21h             ;return to dos
        end     start           ;marks the end of the source code
                                ;and specifies where you want the
                                ;program to start execution
;--------------------------------