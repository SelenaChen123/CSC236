Test date: 03/27/20  20:53:09 
The number of times you used the grading program is 5 
In the business world, your customer replaces the grading program. 
The goal is a correct program with the fewest grading attempts. 
Linkhll Grading System Version 4.0
Student: Last=Chen                 First=Selena               Type=Individual          
Grading and testing history log
       User Test.    Date: 03/27/20  17:00:25  user_test    testout      
   *** Grading Run.  Date: 03/27/20  17:00:43 
       User Test.    Date: 03/27/20  17:15:58  user_test    testout      
   *** Grading Run.  Date: 03/27/20  17:16:00 
       User Test.    Date: 03/27/20  17:38:19  user_test    testout      
       User Test.    Date: 03/27/20  17:46:00  user_test    testout      
   *** Grading Run.  Date: 03/27/20  17:46:06 
       User Test.    Date: 03/27/20  20:50:13  user_test    testout      
       User Test.    Date: 03/27/20  20:51:09  user_test    testout      
   *** Grading Run.  Date: 03/27/20  20:51:13 
       User Test.    Date: 03/27/20  20:53:06  user_test    testout      
   *** Grading Run.  Date: 03/27/20  20:53:09 

++ Grade ++   60 = Points earned for correct answers.

+  Your executed instruction count per call is = 00018
+   
+  Target instructions executed per call is:
+  20 points 01 - 18 
+  15 points 19 - 20 
+  10 points 21 - 22 
+   5 points 23 - 24 
+   0 points 25+      
+                     
++ Grade ++   20 = Points earned for code executed efficiency!

-> Analyzing program documentation. 
The heuristic algorithms used may have problems with your specific code. 
Contact the instructor if you detect a problem with your grade. 
DOCPH-0019 The program header format is adequate. 
DOCHB-0.65 Use of code block headers is adequate. 
DOCLC-1.00 Use of line comments is adequate. 
++ Grade ++   20 = Points earned for correct documentation.    

-> Calculating the total grade for the program.                  
This grade is subject to adjustment by the instructor.           
This grade will be reduced by any late submission penalty.       
++ Grade ++  100 = Total grade generated by the Grading System.  

-> Statistics on testing and grading                             
     7  = Number of user tests.                                  
     5  = Number of grading runs to get the program working.     
     0  = Number of grading runs to improve efficiency or documentation. 

+- atyC<6&}xC6&k~C86&juiC86&zuzC766&Zkyz&jgzk@&6958=586&&86@;9@6?&

Building the file linkhll.ans for electronic submission...

;---------------------------------------------------------------------
;
; Program:       Linkhll
;
; Function:      The linkhll subroutine will be passed four unsigned
;                words on the stack (these are passed by value).
;                Linkhll is to find the two largest unsigned values
;                and multiply them creating a 32 bit unsigned product.
;
; Owner:         Selena Chen (schen53)
;
; Date:          03/29/2020
;
; Changes:
; --------------------------
; 11/21/2016 Original version
; 03/27/2020 Completed version
;
;---------------------------------------
         .model    small               ;64k code and 64k data
         .8086                         ;only allow 8086 instructions
         public    _linkhll            ;allow extrnal programs to call
;---------------------------------------
         .code                         ;start the code segment
;---------------------------------------
_linkhll:                              ;
         push      bp                  ;save bp register
         mov       bp,sp               ;set up bp
;---------------------------------------
; Assumes v1 is max1 and v2 is max2
;---------------------------------------
         mov       ax,[bp + 4]         ;ax = v1
         mov       bx,[bp + 6]         ;dx = v2
;---------------------------------------
; Compares v1 and v2
;---------------------------------------
         cmp       ax,bx               ;if v1 >= v2
         jae       v3max1              ;compare with v3
         xchg      ax,bx               ;else swap v1 and v2
;---------------------------------------
; Compares max1 and v3
;---------------------------------------
v3max1:                                ;
         cmp       ax,[bp + 8]         ;if max1 >= v3
         jae       v3max2              ;compare v3 with max2
         xchg      bx,ax               ;else ax is max2
         xchg      ax,[bp + 8]         ;and v3 is max1
         jmp       v4max1              ;compare with v4
;---------------------------------------
; Compares max2 and v3
;---------------------------------------
v3max2:                                ;
         cmp       bx,[bp + 8]         ;if max2 >= v3
         jae       v4max1              ;compare with v4
         xchg      bx,[bp + 8]         ;else v3 is max2
;---------------------------------------
; Compares max1 and v4
;---------------------------------------
v4max1:                                ;
         cmp       ax,[bp + 10]        ;if max1 >= v4
         jae       v4max2              ;compare v4 with max2
         xchg      bx,ax               ;else ax is max2
         xchg      ax,[bp + 10]        ;and v4 is max1
         jmp       multiply            ;ready to multiply
;---------------------------------------
; Compares max2 and v4
;---------------------------------------
v4max2:                                ;
         cmp       bx,[bp + 10]        ;if max2 >= v4
         jae       multiply            ;ready to multiply
         xchg      bx,[bp + 10]        ;else v4 is max2
;---------------------------------------
; Multiplies the two largest values
;---------------------------------------
multiply:                              ;
         mul       bx                  ;multiply the 2 largest
;---------------------------------------
; Restore registers and return
;---------------------------------------
exit:                                  ;
         pop       bp                  ;retrieve bp register
         ret                           ;return
         end                           ;end source code
;---------------------------------------